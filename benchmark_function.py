#!/usr/bin/env python3

"""
AFUNCTION FILE
Function file of PSO-tool, a personal academic project
For further information visit its GitHub page: github.com/rodosara/PSO-tool
Rodolfo Saraceni
This file contains all benchmark functions use in this work, sorted by the reference paper
"""

from math import exp, sqrt, sin, cos, pi


class BenchFunc:
    """Generic class definition"""

    def __init__(self, name, dimension, fitting, minimum, solution,
                 equal_constraints, inequal_constraints, bounds):
        self.name = name
        self.dimension = dimension
        self.fitting = fitting
        self.minimum = minimum
        self.solution = solution
        self.equal_constraints = equal_constraints
        self.inequal_constraints = inequal_constraints
        self.bounds = bounds

    def function(self, inp):
        """Function to calc the fitting value of provided position"""

        for k in range(len(inp)):
            # Rewrite variables from string
            locals()[f"x{k+1}"] = inp[k]

        return eval(self.fitting)

    def verify_const(self, inp):
        """Function to verify if all constraints are satisfied"""

        for k in range(len(inp)):
            # Rewrite variables from string
            locals()[f"x{k+1}"] = inp[k]

        res = []
        # Append equalities constraints
        for m in range(len(self.equal_constraints)):
            res.extend([eval(self.equal_constraints[m]) == 0])
        # Append inequalities constraints
        for m in range(len(self.inequal_constraints)):
            res.extend([eval(self.inequal_constraints[m]) <= 0])
        # Append boundaries
        for m in range(len(self.bounds)):
            if self.bounds[m][0] <= eval(f"x{m+1}") <= self.bounds[m][1]:
                res.extend([True])
            else:
                res.extend([False])

        # Verify all constraints
        return all(res)

    def pick_inequal_const(self, inp, index):
        """Pick-up one from inequal constraint"""

        for k in range(len(inp)):
            # Rewrite variables from string
            locals()[f"x{k+1}"] = inp[k]
        return eval(self.inequal_constraints[index])

    def pick_equal_const(self, inp, index):
        """Pick-up one from equal constraint"""

        for k in range(len(inp)):
            # Rewrite variables from string
            locals()[f"x{k+1}"] = inp[k]

        return eval(self.equal_constraints[index])

    def pick_inequal_bounds_const(self, inp, index):
        """Pick-up one from bounds constraints"""

        bounds_constraints = []
        # Rewrite bounds in a way appropiate for the computation
        for k in range(len(self.bounds)):
            bounds_constraints.extend([str(self.bounds[k][0])+" - "+f"x{k+1}"])
            bounds_constraints.extend([f"x{k+1}"+" - "+str(self.bounds[k][1])])
        all_constraints = self.inequal_constraints + bounds_constraints

        for k in range(len(inp)):
            # Rewrite variables from string
            locals()[f"x{k+1}"] = inp[k]

        return eval(all_constraints[index])


"""
Sample class (you can also use math function, simply import them in the first line)
    name_function = BenchFunc(fitting function name [string],
            fitting function dimension [int],
            fitting function [string],
            minimum value of the function [int],
            solution of minimum [list of int],
            fitting function constraints <=0 [string],
            fitting function bound for each component [low_bound, upper_bound] [list of int])
"""

# Benchmark function of paper one
g1_1 = BenchFunc(
    "g1_1",
    13,
    "5*x1 + 5*x2 + 5*x3 + 5*x4 - 5*(x1**2+x2**2+x3**2+x4**2) - (x5+x6+x7+x8+x9+x10+x11+x12+x13)",
    -15,
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1],
    [],
    ["2*x1 + 2*x2 + x10 + x11 - 10",
     "-8*x1 + x10",
     "-2*x4 - x5 + x10",
     "2*x1 + 2*x3 + x10 + x12 - 10",
     "-8*x2 + x11",
     "-2*x6 - x7 + x11",
     "2*x2 + 2*x3 + x11 + x12 - 10",
     "-8*x3 + x12",
     "-2*x8 -x9 + x12"],
    [[0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 100],
     [0, 100],
     [0, 100],
     [0, 1]])

g1_2 = BenchFunc(
    "g1_2",
    10,
    "abs(((cos(x1)**4+cos(x2)**4+cos(x3)**4+cos(x4)**4+cos(x5)**4+cos(x6)**4+cos(x7)**4+cos(x8)**4+cos(x9)**4+cos(x10)**4) - 2*(cos(x1)**2*cos(x2)**2*cos(x3)**2*cos(x4)**2*cos(x5)**2*cos(x6)**2*cos(x7)**2*cos(x8)**2*cos(x9)**2*cos(x10)**2))/sqrt(1*x1**2+2*x2**2+3*x3**2+4*x4**2+5*x5**2+6*x6**2+7*x7**2+8*x8**2+9*x9**2+10*x10**2))",
    0,
    [],
    [],
    ["-x1*x2*x3*x4*x5*x6*x7*x8*x9*x10 + 0.75",
     "x1+x2+x3+x4+x5+x6+x7+x8+x9+x10 - 7.5*10"],
    [[0, 10],
     [0, 10],
     [0, 10],
     [0, 10],
     [0, 10],
     [0, 10],
     [0, 10],
     [0, 10],
     [0, 10],
     [0, 10], ])

g1_3 = BenchFunc(
    "g1_3",
    11,
    "(sqrt(11))**(11) * (x1*x2*x3*x4*x5*x6*x7*x8*x9*x10) * (1-(x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2))",
    -1,
    # [0.316227755,0.316227755,0.316227755,0.316227755,0.316227755,0.316227755,0.316227755,0.316227755,0.316227755,0.316227755,0.316227755],
    [0.333333333, 0.333333333, 0.333333333, 0.333333333, 0.333333333, 0.333333333, 0.333333333, 0.333333333, 0.333333333, 0.333333333],
    [],
    ["x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1",
     "x1**2+x2**2+x3**2+x4**2+x5**2+x6**2+x7**2+x8**2+x9**2+x10**2 - 1"],
    [[0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1], ])

g1_4 = BenchFunc(
    "g1_4",
    5,
    "5.3578547*x3**2 + 0.8356891*x1*x5 + 37.293239*x1 - 40792.141",
    -30665.7,
    [78.0, 33.0, 29.995, 45.0, 36.776],
    [],
    ["-85.334407 - 0.0056858*x2*x5 - 0.00026*x1*x4 + 0.0022053*x3*x5",
     "-6.665593 + 0.0056858*x2*x5 + 0.00026*x1*x4 - 0.0022053*x3*x5",
     "9.48751 - 0.0071317*x2*x5 - 0.0029955*x1*x2 - 0.0021813*x3**2",
     "-29.48751 + 0.0071317*x2*x5 + 0.0029955*x1*x2 + 0.0021813*x3**2",
     "+10.699039 - 0.0047026*x3*x5 - 0.0012547*x1*x3 - 0.0019085*x3*x4",
     "-15.699039 + 0.0047026*x3*x5 + 0.0012547*x1*x3 + 0.0019085*x3*x4"],
    [[78, 102],
     [33, 45],
     [27, 45],
     [27, 45],
     [27, 45]])

g1_5 = BenchFunc(
    "g1_5",
    4,
    "3*x1 + 0.000001*x1**3 + 2*x2 + 0.000002/(3*x2**3)",
    5126.4981,
    [679.9453, 1026.067, 0.1188764, -0.3962336],
    ["1000*sin(-x3-0.25) + 1000*sin(-x4-0.25) + 894.8 - x1",
     "1000*sin(x3-0.25) + 1000*sin(x3-x4-0.25) + 894.8 - x2",
     "1000*sin(x4-0.25) + 1000*sin(x4-x3-0.25) + 1294.8"],
    ["-x4 + x3 - 0.55",
     "-x3 + x4 - 0.55"],
    [[0, 1200],
     [0, 1200],
     [-0.55, 0.55],
     [-0.55, 0.55]])

g1_6 = BenchFunc(
    "g1_6",  # Equal to g2_2
    2,
    "(x1-10)**3 + (x2-20)**3",
    -6961.81381,
    [14.095, 0.84296],
    [],
    ["100 - (x1-5)**2 - (x2-5)**2",
     "(x1-6)**2 + (x2-5)**2 - 82.81"],
    [[13, 100],
     [0, 100]])

g1_7 = BenchFunc(
    "g1_7",
    10,
    "x1**2 + x2**2 + x1*x2 - 14*x1 - 16*x2 + (x3-10)**2 + 4*(x4-5)**2 + (x5-3)**2 + 2*(x6-1)**2 + 5*x7**2 + 7*(x8-11)**2 + 2*(x9-10)**2 + (x10-7)**2 + 45",
    24.3062091,
    [2.171996, 2.363683, 8.773926, 5.095984, 0.9906548,
        1.430574, 1.321644, 9.828726, 8.280092, 8.375927],
    [],
    ["-105 + 4*x1 + 5*x2 - 3*x7 + 9*x8",
     "10*x1 - 8*x2 - 17*x7 + 2*x8",
     "-8*x1 + 2*x2 + 5*x9 - 2*x10 - 12",
     "-3*x1 + 6*x2 + 12*(x9-8)**2 - 7*x10",
     "3*(x1-2)**2 + 4*(x2-3)**2 + 2*x3**2 - 7*x4 - 120",
     "x1**2 + 2*(x2-2)**2 - 2*x1*x2 + 14*x5 - 6*x6",
     "5*x1**2 + 8*x2 + (x3-6)**2 - 2*x4 - 40",
     "0.5*(x1-8)**2 + 2*(x2-4)**2 + 3*x5**2 - x6 - 30"],
    [[-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10]])

g1_8 = BenchFunc(
    "g1_8",
    2,
    "((sin(2*pi*x1)**3) * sin(2*pi*x2)) / (x1**3*(x1+x2))",
    -0.09583,
    [],
    [],
    ["x1**2 - x2 + 1",
     "1 - x1 + (x2-4)**2"],
    [[0, 10],
     [0, 10]])

g1_9 = BenchFunc(
    "g1_9",
    7,
    "(x1-10)**2 + 5*(x2-12)**2 + x3**4 + 3*(x4-11)**2 + 10*x5**6 + 7*x6**2 + x7**4 - 4*x6*x7 - 10*x6 - 8*x7",
    680.6300573,
    [2.330499, 1.951372, -0.4775414, 4.365726, -0.6244870, 1.038131, 1.594227],
    [],
    ["-127 + 2*x1**2 + 3*x2**4 + x3 + 4*x4**2 + 5*x5",
     "-196 + 23*x1 + x2**2 + 6*x6**2 - 8*x7",
     "-282 + 7*x1 + 3*x2 + 10*x3**2 + x4 - x5",
     "4*x1**2 + x2**2 - 3*x1*x2 + 2*x3**2 + 5*x6 - 11*x7"],
    [[-10.0, 10.0],
     [-10.0, 10.0],
     [-10.0, 10.0],
     [-10.0, 10.0],
     [-10.0, 10.0],
     [-10.0, 10.0],
     [-10.0, 10.0]])

g1_10 = BenchFunc(
    "g1_10",  # Equal to g3_3
    8,
    "x1 + x2 + x3",
    7049.330923,
    [579.3167, 1359.943, 5110.071, 182.0174,
        295.5985, 217.9799, 286.4162, 395.5979],
    [],
    ["-1 + 0.0025*(x4+x6)",
     "-1 + 0.01*(x8-x5)",
     "-x2*x7 + 1250*x5 + x2*x4 - 1250*x4",
     "-1 + 0.0025*(x5+x7-x4)",
     "-x1*x6 + 833.33252*x4 + 100*x1 - 83333.333",
     "-x3*x8 + 1250000 + x3*x5 - 2500*x5"],
    [[100, 10000],
     [1000, 10000],
     [1000, 10000],
     [10, 1000],
     [10, 1000],
     [10, 1000],
     [10, 1000],
     [10, 1000]])

g1_11 = BenchFunc(
    "g1_11",
    1,
    "x1**2 + (x1**2-1)**2",
    0.75000455,
    [0.70711, 0.5],
    [],
    [],
    [[-1, 1]])

# Benchmark function of paper two
g2_1 = BenchFunc(
    "g2_1",
    1,
    "(2*x1-3)**2 + (x1-1)**2",
    1.3934651,
    [],
    [],
    ["8*x1**2 - 4*x1 - 3"],
    [])

g2_2 = BenchFunc(
    "g2_2",  # Equal to g1_6
    2,
    "(x1-10)**3 + (x2-20)**3",
    -6961.81381,
    [],
    [],
    ["100 - (x1-5)**2 - (x2-5)**2",
     "(x1-6)**2 + (x2-5)**2 - 82.81"],
    [[13, 100],
     [0, 100]])

g2_3 = BenchFunc(
    "g2_3",
    7,
    "(x1-10)**2 + 5*(x2-12)**2 + x3**4 + 3*(x4-11)**2 + 10*x5**6 + 7*x6**2 + x7**4 - 4*x6*x7 - 10*x6 - 8*x7",
    680.630057,
    [],
    [],
    ["-127 + 2*x1**2 + 3*x2**4 + x3 + 4*x4**2 + 5*x5",
     "-282 + 7*x1 + 3*x2 + 10*x3**2 + x4 - x5",
     "-196 + 23*x1 + x2**2 + 6*x6**2 - 8*x7",
     "4*x1**2 + x2**2 - 3*x1*x2 + 2*x3**2 + 5*x6 - 11*x7"],
    [[-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10]])

g2_4 = BenchFunc(
    "g2_4",
    5,
    "5.3578547*x3**2 + 0.8356891*x1*x5 + 37.293239*x1 - 40792.141",
    -30665.538,
    [],
    [],
    ["-85.334407 - 0.0056858*x2*x5 - 0.0006262*x1*x4 + 0.0022053*x3*x5",
     "-6.665593 + 0.0056858*x2*x5 + 0.0006262*x1*x4 - 0.0022053*x3*x5",
     "9.48751 - 0.0071317*x2*x5 - 0.0029955*x1*x2 - 0.0021813*x3**2",
     "-29.48751 + 0.0071317*x2*x5 + 0.0029955*x1*x2 + 0.0021813*x3**2",
     "10.699039 - 0.0047026*x3*x5 - 0.0012547*x1*x3 - 0.0019085*x3*x4",
     "-15.699039 + 0.0047026*x3*x5 + 0.0012547*x1*x3 + 0.0019085*x3*x4"],
    [[78, 102],
     [33, 45],
     [27, 45],
     [27, 45],
     [27, 45]])

g2_5 = BenchFunc(
    "g2_5",
    5,
    "5.3578547*x3**2 + 0.8356891*x1*x5 + 37.293239*x1 - 40792.141",
    -31544.459,  # Best value of paper
    [],
    [],
    ["-85.334407 - 0.0056858*x2*x3 - 0.00026*x1*x4 + 0.0022053*x3*x5",
     "-6.665593 + 0.0056858*x2*x3 + 0.00026*x1*x4 - 0.0022053*x3*x5",
     "9.48751 - 0.0071317*x2*x5 - 0.0029955*x1*x2 - 0.0021813*x3**2",
     "-29.48751 + 0.0071317*x2*x5 + 0.0029955*x1*x2 + 0.0021813*x3**2",
     "10.699039 - 0.0047026*x3*x5 - 0.0012547*x1*x3 - 0.0019085*x3*x4",
     "-15.699039 + 0.0047026*x3*x5 + 0.0012547*x1*x3 + 0.0019085*x3*x4"],
    [[78, 102],
     [33, 45],
     [27, 45],
     [27, 45],
     [27, 45]])

g2_6 = BenchFunc(
    "g2_6",
    6,
    "-10.5*x1 - 7.5*x2 - 3.5*x3 - 2.5*x4 - 1.5*x5 - 10*x6 - 0.5*(x1**2+x2**2+x3**2+x4**2+x5**2)",
    -213.0,
    [],
    [],
    ["6*x1 + 3*x2 + 3*x3 + 2*x4 + x5 - 6.5",
     "-20 + 10*x1 + 10*x3 + x6",
     "-x6"],
    [[0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 1],
     [0, 20]])

# Benchmark function of paper three
g3_1 = BenchFunc(
    "g3_1",
    10,
    "x1**2 + x2**2 + x1*x2 - 14*x1 - 16*x2 + (x3-10)**2 + 4*(x4-5)**2 + (x5-3)**2 + 2*(x6-1)**2 + 5*x7**2 + 7*(x8-11)**2 + 2*(x9-10)**2 + (x10-7)**2 + 45",
    24.30620,
    [2.1719, 2.3636, 8.7739, 5.0959, 0.9906,
        1.4305, 1.3216, 9.8287, 8.2800, 8.3759],
    [],
    ["-105 + 4*x1 + 5*x2 - 3*x7 + 9*x8",
     "10*x1 - 8*x2 - 17*x7 + 2*x8",
     "-8*x1 + 2*x2 + 5*x9 - 2*x10 - 12",
     "-3*x1 + 6*x2 + 12*(x9-8)**2 - 7*x10",
     "3*(x1-2)**2 + 4*(x2-3)**2 + 2*x3**2 - 7*x4 - 120",
     "x1**2 + 2*(x2-2)**2 - 2*x1*x2 + 14*x5 - 6*x6",
     "5*x1**2 + 8*x2 + (x3-6)**2 - 2*x4 - 40",
     "0.5*(x1-8)**2 + 2*(x2-4) + 3*x5**2 - x6 - 30"],  # Only difference with g1_7 is 2*(x2-4)**2
    [[-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10]])

g3_2 = BenchFunc(
    "g3_2",
    7,
    # Only difference with g1_9 is x7**4 missing
    "(x1-10)**2 + 5*(x2-12)**2 + x3**4 + 3*(x4-11)**2 + 10*x5**6 + 7*x6**2 - 4*x6*x7 - 10*x6 - 8*x7",
    680.6301,
    [2.3304, 1.9513, -0.4775, 4.3657, -0.6244, 1.0381, 1.5942],
    [],
    ["-127 + 2*x1**2 + 3*x2**4 + x3 + 4*x4**2 + 5*x5",
     "-196 + 23*x1 + x2**2 + 6*x6**2 - 8*x7",
     "-282 + 7*x1 + 3*x2 + 10*x3**2 + x4 - x5",
     "4*x1**2 + x2**2 - 3*x1*x2 + 2*x3**2 + 5*x6 - 11*x7"],
    [[-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10],
     [-10, 10]])

g3_3 = BenchFunc(
    "g3_3",  # Equal to g1_10
    8,
    "x1 + x2 + x3",
    7049.248,
    [579.3167, 1359.943, 5110.71, 182.0714, 295.5985, 217.979, 286.4162, 395.5979],
    [],
    ["-1 + 0.0025*(x4+x6)",
     "-1 + 0.01*(x8-x5)",
     "-x2*x7 + 1250*x5 + x2*x4 - 1250*x4",
     "-1 + 0.0025*(x5+x7-x4)",
     "-x1*x6 + 833.33252*x4 + 100*x1 - 83333.333",
     "-x3*x8 + 1250000 + x3*x5 - 2500*x5"],
    [[100, 10000],
     [1000, 10000],
     [1000, 10000],
     [10, 1000],
     [10, 1000],
     [10, 1000],
     [10, 1000],
     [10, 1000]])

g3_4 = BenchFunc(
    "g3_4",
    5,
    "exp(x1*x2*x3*x4*x5)",
    0.05395,
    [-1.171431, 1.595709, 1.827247, -0.7636413, -0.763645],
    ["x1**2 + x2**2 + x3**2 + x4**2 + x5 - 10",
     "x2*x3 - 5*x4*x5",
     "x1**3 + x2**3 + 1"],
    [],
    [[-2.3, 2.3],
     [-2.3, 2.3],
     [-3.2, 3.2],
     [-3.2, 3.2],
     [-3.2, 3.2]])

g3_5 = BenchFunc(
    "g3_5",
    3,
    "(x3+2)*x2*x1**2",
    0.01266523,
    [0.05169793, 0.35693118, 11.27646560],
    [],
    ["1-((x2**3*x3) / (71785*x1**4))",
     "((4*x2**2 - x1*x2) / (12566*(x2*x1**3-x1**4))) + (1 / (5108*x1**2)) - 1",
     "1 - ((140.45*x1) / (x2**2*x3))",
     "((x1 + x2) / 1.5) - 1"],
    [[0.05, 2],
     [0.25, 1.3],
     [2, 15]])

g3_6 = BenchFunc(
    "g3_6",
    2,
    "(2*sqrt(2)*x1 + x2)*100",
    263.89584,
    [0.78860050, 0.40845943],
    [],
    ["((sqrt(x1) + x2) / (sqrt(2)*x1**2 + 2*x1*x2))*2 - 2",
     "(x2 / (sqrt(2)*x1**2 + 2*x1*x2))*2 - 2",
     "(1 / (sqrt(2)*x2 + x1))*2 - 2"],
    [[0, 1],
     [0, 1]])
